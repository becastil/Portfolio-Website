name: Lighthouse CI & Performance

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: lighthouse-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lighthouse:
    name: Lighthouse Performance & Accessibility
    runs-on: ubuntu-latest
    
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g @lhci/cli@0.13.x
      
      - name: Build application
        run: npm run build
        env:
          CI: true
      
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
      
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 30
      
      - name: Format Lighthouse Score
        if: always()
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(
              fs.readFileSync('.lighthouseci/lhr-0.json', 'utf8')
            );
            
            const score = (s) => Math.round(s * 100);
            const emojiScore = (s) => s >= 0.9 ? '🟢' : s >= 0.5 ? '🟠' : '🔴';
            
            const comment = `## Lighthouse Results
            
            | Category | Score |
            |----------|-------|
            | ${emojiScore(results.categories.performance.score)} Performance | ${score(results.categories.performance.score)} |
            | ${emojiScore(results.categories.accessibility.score)} Accessibility | ${score(results.categories.accessibility.score)} |
            | ${emojiScore(results.categories['best-practices'].score)} Best Practices | ${score(results.categories['best-practices'].score)} |
            | ${emojiScore(results.categories.seo.score)} SEO | ${score(results.categories.seo.score)} |
            | ${emojiScore(results.categories.pwa.score)} PWA | ${score(results.categories.pwa.score)} |
            
            ### Performance Metrics
            - First Contentful Paint: ${results.audits['first-contentful-paint'].displayValue}
            - Largest Contentful Paint: ${results.audits['largest-contentful-paint'].displayValue}
            - Total Blocking Time: ${results.audits['total-blocking-time'].displayValue}
            - Cumulative Layout Shift: ${results.audits['cumulative-layout-shift'].displayValue}
            - Speed Index: ${results.audits['speed-index'].displayValue}`;
            
            return comment;
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = ${{ steps.format_lighthouse_score.outputs.result }};
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Check Lighthouse Assertions
        id: lighthouse_check
        run: |
          # Check if Lighthouse CI passed or failed
          if [ -f ".lighthouseci/lhr-0.json" ]; then
            PERFORMANCE_SCORE=$(jq '.categories.performance.score' .lighthouseci/lhr-0.json)
            ACCESSIBILITY_SCORE=$(jq '.categories.accessibility.score' .lighthouseci/lhr-0.json)
            BEST_PRACTICES_SCORE=$(jq '.categories["best-practices"].score' .lighthouseci/lhr-0.json)
            SEO_SCORE=$(jq '.categories.seo.score' .lighthouseci/lhr-0.json)
            
            echo "Performance: $PERFORMANCE_SCORE"
            echo "Accessibility: $ACCESSIBILITY_SCORE"
            echo "Best Practices: $BEST_PRACTICES_SCORE"
            echo "SEO: $SEO_SCORE"
            
            # Check quality gates (95+ scores)
            FAILED_GATES=""
            
            if (( $(echo "$PERFORMANCE_SCORE < 0.95" | bc -l) )); then
              FAILED_GATES="$FAILED_GATES Performance"
            fi
            
            if (( $(echo "$ACCESSIBILITY_SCORE < 0.95" | bc -l) )); then
              FAILED_GATES="$FAILED_GATES Accessibility"
            fi
            
            if (( $(echo "$BEST_PRACTICES_SCORE < 0.95" | bc -l) )); then
              FAILED_GATES="$FAILED_GATES Best-Practices"
            fi
            
            if (( $(echo "$SEO_SCORE < 0.95" | bc -l) )); then
              FAILED_GATES="$FAILED_GATES SEO"
            fi
            
            if [ -n "$FAILED_GATES" ]; then
              echo "Quality gates failed for:$FAILED_GATES"
              echo "All scores must be 95 or higher to pass quality gates"
              exit 1
            else
              echo "All Lighthouse quality gates passed!"
            fi
          else
            echo "Lighthouse results not found"
            exit 1
          fi

      - name: Performance Budget Check
        run: |
          if [ -f ".lighthouseci/lhr-0.json" ]; then
            # Check Core Web Vitals
            FCP=$(jq '.audits["first-contentful-paint"].numericValue' .lighthouseci/lhr-0.json)
            LCP=$(jq '.audits["largest-contentful-paint"].numericValue' .lighthouseci/lhr-0.json)
            CLS=$(jq '.audits["cumulative-layout-shift"].numericValue' .lighthouseci/lhr-0.json)
            TBT=$(jq '.audits["total-blocking-time"].numericValue' .lighthouseci/lhr-0.json)
            
            echo "Core Web Vitals:"
            echo "FCP: ${FCP}ms (budget: 1500ms)"
            echo "LCP: ${LCP}ms (budget: 2500ms)"
            echo "CLS: $CLS (budget: 0.1)"
            echo "TBT: ${TBT}ms (budget: 300ms)"
            
            # Check performance budgets
            BUDGET_VIOLATIONS=""
            
            if (( $(echo "$FCP > 1500" | bc -l) )); then
              BUDGET_VIOLATIONS="$BUDGET_VIOLATIONS FCP"
            fi
            
            if (( $(echo "$LCP > 2500" | bc -l) )); then
              BUDGET_VIOLATIONS="$BUDGET_VIOLATIONS LCP"
            fi
            
            if (( $(echo "$CLS > 0.1" | bc -l) )); then
              BUDGET_VIOLATIONS="$BUDGET_VIOLATIONS CLS"
            fi
            
            if (( $(echo "$TBT > 300" | bc -l) )); then
              BUDGET_VIOLATIONS="$BUDGET_VIOLATIONS TBT"
            fi
            
            if [ -n "$BUDGET_VIOLATIONS" ]; then
              echo "Performance budget violations:$BUDGET_VIOLATIONS"
              echo "::warning::Performance budget exceeded for:$BUDGET_VIOLATIONS"
            else
              echo "All performance budgets met!"
            fi
          fi

      - name: Generate Performance Report
        if: always()
        run: |
          echo "# Lighthouse Performance Report" > lighthouse-summary.md
          echo "" >> lighthouse-summary.md
          echo "Generated on: $(date)" >> lighthouse-summary.md
          echo "" >> lighthouse-summary.md
          
          if [ -f ".lighthouseci/lhr-0.json" ]; then
            echo "## Scores" >> lighthouse-summary.md
            echo "| Category | Score | Status |" >> lighthouse-summary.md
            echo "|----------|-------|--------|" >> lighthouse-summary.md
            
            PERFORMANCE_SCORE=$(jq '.categories.performance.score' .lighthouseci/lhr-0.json)
            ACCESSIBILITY_SCORE=$(jq '.categories.accessibility.score' .lighthouseci/lhr-0.json)
            BEST_PRACTICES_SCORE=$(jq '.categories["best-practices"].score' .lighthouseci/lhr-0.json)
            SEO_SCORE=$(jq '.categories.seo.score' .lighthouseci/lhr-0.json)
            PWA_SCORE=$(jq '.categories.pwa.score' .lighthouseci/lhr-0.json)
            
            echo "| Performance | $(echo "$PERFORMANCE_SCORE * 100" | bc | cut -d. -f1) | $([ $(echo "$PERFORMANCE_SCORE >= 0.95" | bc) -eq 1 ] && echo "✅" || echo "❌") |" >> lighthouse-summary.md
            echo "| Accessibility | $(echo "$ACCESSIBILITY_SCORE * 100" | bc | cut -d. -f1) | $([ $(echo "$ACCESSIBILITY_SCORE >= 0.95" | bc) -eq 1 ] && echo "✅" || echo "❌") |" >> lighthouse-summary.md
            echo "| Best Practices | $(echo "$BEST_PRACTICES_SCORE * 100" | bc | cut -d. -f1) | $([ $(echo "$BEST_PRACTICES_SCORE >= 0.95" | bc) -eq 1 ] && echo "✅" || echo "❌") |" >> lighthouse-summary.md
            echo "| SEO | $(echo "$SEO_SCORE * 100" | bc | cut -d. -f1) | $([ $(echo "$SEO_SCORE >= 0.95" | bc) -eq 1 ] && echo "✅" || echo "❌") |" >> lighthouse-summary.md
            echo "| PWA | $(echo "$PWA_SCORE * 100" | bc | cut -d. -f1) | $([ $(echo "$PWA_SCORE >= 0.90" | bc) -eq 1 ] && echo "✅" || echo "❌") |" >> lighthouse-summary.md
          fi

      - name: Upload Performance Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-performance-report
          path: lighthouse-summary.md
          retention-days: 30