name: Lighthouse CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g @lhci/cli@0.13.x
      
      - name: Build application
        run: npm run build
        env:
          CI: true
      
      - name: Run Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          LHCI_TOKEN: ${{ secrets.LHCI_TOKEN }}
      
      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 30
      
      - name: Format Lighthouse Score
        if: always()
        id: format_lighthouse_score
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(
              fs.readFileSync('.lighthouseci/lhr-0.json', 'utf8')
            );
            
            const score = (s) => Math.round(s * 100);
            const emojiScore = (s) => s >= 0.9 ? 'ðŸŸ¢' : s >= 0.5 ? 'ðŸŸ ' : 'ðŸ”´';
            
            const comment = `## Lighthouse Results
            
            | Category | Score |
            |----------|-------|
            | ${emojiScore(results.categories.performance.score)} Performance | ${score(results.categories.performance.score)} |
            | ${emojiScore(results.categories.accessibility.score)} Accessibility | ${score(results.categories.accessibility.score)} |
            | ${emojiScore(results.categories['best-practices'].score)} Best Practices | ${score(results.categories['best-practices'].score)} |
            | ${emojiScore(results.categories.seo.score)} SEO | ${score(results.categories.seo.score)} |
            | ${emojiScore(results.categories.pwa.score)} PWA | ${score(results.categories.pwa.score)} |
            
            ### Performance Metrics
            - First Contentful Paint: ${results.audits['first-contentful-paint'].displayValue}
            - Largest Contentful Paint: ${results.audits['largest-contentful-paint'].displayValue}
            - Total Blocking Time: ${results.audits['total-blocking-time'].displayValue}
            - Cumulative Layout Shift: ${results.audits['cumulative-layout-shift'].displayValue}
            - Speed Index: ${results.audits['speed-index'].displayValue}`;
            
            return comment;
      
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = ${{ steps.format_lighthouse_score.outputs.result }};
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Check Lighthouse Assertions
        if: failure()
        run: |
          echo "Lighthouse CI assertions failed!"
          echo "Check the results at: https://googlechrome.github.io/lighthouse/viewer/"
          exit 1