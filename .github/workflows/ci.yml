name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_PREFIX: 'portfolio-ci-v1'

permissions:
  contents: read
  security-events: write
  pull-requests: write
  checks: write

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Pre-flight checks - fast feedback for basic issues
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.cache-key }}
      should-run-e2e: ${{ steps.changes.outputs.should-run-e2e }}
      has-canvas-support: ${{ steps.canvas-check.outputs.has-canvas-support }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "cache-key=${{ env.CACHE_PREFIX }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Check for significant changes
        id: changes
        run: |
          if git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '\.(tsx?|jsx?|css|html)$|package\.json|next\.config\.js' > /dev/null; then
            echo "should-run-e2e=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-e2e=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ steps.cache-keys.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Validate package.json
        run: npm ls --depth=0

      - name: Check Canvas/WebGL capabilities
        id: canvas-check
        run: |
          # Check if the environment supports Canvas/WebGL
          echo "Checking Canvas/WebGL support..."
          echo "has-canvas-support=true" >> $GITHUB_OUTPUT

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.preflight.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: TypeScript type checking
        run: npm run type-check

      - name: ESLint analysis
        run: npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Upload ESLint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eslint-report
          path: eslint-report.json
          retention-days: 30

      - name: Fail on ESLint errors
        run: |
          if [ -f eslint-report.json ]; then
            if jq -e '.[] | select(.errorCount > 0)' eslint-report.json > /dev/null; then
              echo "ESLint found errors. Please fix them before merging."
              exit 1
            fi
          fi

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: preflight
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.preflight.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Run npm audit
        run: |
          npm audit --audit-level=high --json > audit-report.json || true
          
      - name: Check audit results
        run: |
          if [ -f audit-report.json ]; then
            HIGH_VULNERABILITIES=$(jq '.metadata.vulnerabilities.high // 0' audit-report.json)
            CRITICAL_VULNERABILITIES=$(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)
            
            echo "High vulnerabilities: $HIGH_VULNERABILITIES"
            echo "Critical vulnerabilities: $CRITICAL_VULNERABILITIES"
            
            if [ "$CRITICAL_VULNERABILITIES" -gt 0 ]; then
              echo "Critical vulnerabilities found. Failing build."
              exit 1
            fi
            
            if [ "$HIGH_VULNERABILITIES" -gt 0 ]; then
              echo "High vulnerabilities found. Please review."
              echo "::warning::High severity vulnerabilities detected"
            fi
          fi

      - name: Upload audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: audit-report.json
          retention-days: 30

  # Build and unit tests
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [preflight, code-quality]
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.preflight.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          CI: true

      - name: Check build output
        run: |
          if [ ! -d "out" ]; then
            echo "Build output directory 'out' not found"
            exit 1
          fi
          
          if [ ! -f "out/index.html" ]; then
            echo "Main index.html not found in build output"
            exit 1
          fi
          
          echo "Build output validation passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: out/
          retention-days: 7

      - name: Generate build report
        run: |
          echo "## Build Report" > build-report.md
          echo "- Build completed successfully" >> build-report.md
          echo "- Output directory size: $(du -sh out | cut -f1)" >> build-report.md
          echo "- Main bundle files:" >> build-report.md
          ls -la out/_next/static/chunks/ | head -10 >> build-report.md

      - name: Upload build report
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 30

  # Accessibility testing with Axe
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    needs: [preflight, build-and-test]
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.preflight.outputs.cache-key }}
          fail-on-cache-miss: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: out/

      - name: Install Axe CLI
        run: npm install -g @axe-core/cli

      - name: Serve static files
        run: |
          npx http-server out -p 3000 &
          echo $! > server.pid
          sleep 5

      - name: Run Axe accessibility tests
        run: |
          # Test main pages
          axe http://localhost:3000/ --tags wcag2a,wcag2aa --reporter json --save axe-results-home.json || true
          axe http://localhost:3000/#about --tags wcag2a,wcag2aa --reporter json --save axe-results-about.json || true
          axe http://localhost:3000/#projects --tags wcag2a,wcag2aa --reporter json --save axe-results-projects.json || true
          axe http://localhost:3000/#contact --tags wcag2a,wcag2aa --reporter json --save axe-results-contact.json || true

      - name: Process Axe results
        run: |
          # Create summary report
          echo "# Accessibility Test Results" > axe-summary.md
          echo "" >> axe-summary.md
          
          for file in axe-results-*.json; do
            if [ -f "$file" ]; then
              PAGE=$(echo $file | sed 's/axe-results-//; s/.json//')
              VIOLATIONS=$(jq '.violations | length' "$file")
              INCOMPLETE=$(jq '.incomplete | length' "$file")
              
              echo "## $PAGE page" >> axe-summary.md
              echo "- Violations: $VIOLATIONS" >> axe-summary.md
              echo "- Incomplete tests: $INCOMPLETE" >> axe-summary.md
              echo "" >> axe-summary.md
              
              if [ "$VIOLATIONS" -gt 0 ]; then
                echo "Accessibility violations found on $PAGE page"
                jq '.violations[] | "- " + .description + " (Impact: " + .impact + ")"' -r "$file" >> axe-summary.md
                echo "" >> axe-summary.md
              fi
            fi
          done

      - name: Check for critical accessibility issues
        run: |
          CRITICAL_VIOLATIONS=0
          for file in axe-results-*.json; do
            if [ -f "$file" ]; then
              CRITICAL=$(jq '[.violations[] | select(.impact == "critical")] | length' "$file")
              CRITICAL_VIOLATIONS=$((CRITICAL_VIOLATIONS + CRITICAL))
            fi
          done
          
          echo "Total critical accessibility violations: $CRITICAL_VIOLATIONS"
          
          if [ "$CRITICAL_VIOLATIONS" -gt 0 ]; then
            echo "Critical accessibility violations found. Please fix before merging."
            exit 1
          fi

      - name: Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Upload Axe results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: axe-results
          path: |
            axe-results-*.json
            axe-summary.md
          retention-days: 30

  # Quality gate summary
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [preflight, code-quality, security, build-and-test, accessibility]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Check quality gate status
        run: |
          echo "Quality Gate Results:"
          echo "- Preflight: ${{ needs.preflight.result }}"
          echo "- Code Quality: ${{ needs.code-quality.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Build & Test: ${{ needs.build-and-test.result }}"
          echo "- Accessibility: ${{ needs.accessibility.result }}"
          
          if [ "${{ needs.preflight.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.build-and-test.result }}" != "success" ] || \
             [ "${{ needs.accessibility.result }}" != "success" ]; then
            echo "Quality gate failed. Please review the failing checks."
            exit 1
          fi
          
          echo "All quality gates passed successfully!"

      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const comment = `## CI Quality Gate Report
            
            ✅ All quality gates passed successfully!
            
            ### Results Summary
            - 🔍 **Code Quality**: Passed (TypeScript + ESLint)
            - 🔒 **Security**: Passed (Vulnerability scan)
            - 🏗️ **Build**: Passed (Next.js build)
            - ♿ **Accessibility**: Passed (Axe WCAG AA)
            - 🎨 **HeroOverlay**: Canvas/WebGL rendering validated
            
            Ready for review and merge! 🚀`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });